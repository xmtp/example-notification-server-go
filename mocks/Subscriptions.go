// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	interfaces "github.com/xmtp/example-notification-server-go/pkg/interfaces"
)

// Subscriptions is an autogenerated mock type for the Subscriptions type
type Subscriptions struct {
	mock.Mock
}

// GetSubscriptions provides a mock function with given fields: ctx, topic, thirtyDayPeriod
func (_m *Subscriptions) GetSubscriptions(ctx context.Context, topic string, thirtyDayPeriod int) ([]interfaces.Subscription, error) {
	ret := _m.Called(ctx, topic, thirtyDayPeriod)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptions")
	}

	var r0 []interfaces.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]interfaces.Subscription, error)); ok {
		return rf(ctx, topic, thirtyDayPeriod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []interfaces.Subscription); ok {
		r0 = rf(ctx, topic, thirtyDayPeriod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, topic, thirtyDayPeriod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetHmacKeys provides a mock function with given fields: ctx, installationId, updates
func (_m *Subscriptions) SetHmacKeys(ctx context.Context, installationId string, updates interfaces.HmacUpdates) error {
	ret := _m.Called(ctx, installationId, updates)

	if len(ret) == 0 {
		panic("no return value specified for SetHmacKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interfaces.HmacUpdates) error); ok {
		r0 = rf(ctx, installationId, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, installationId, topics
func (_m *Subscriptions) Subscribe(ctx context.Context, installationId string, topics []string) error {
	ret := _m.Called(ctx, installationId, topics)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, installationId, topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeWithMetadata provides a mock function with given fields: ctx, installationId, subscriptions
func (_m *Subscriptions) SubscribeWithMetadata(ctx context.Context, installationId string, subscriptions []interfaces.SubscriptionInput) error {
	ret := _m.Called(ctx, installationId, subscriptions)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeWithMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interfaces.SubscriptionInput) error); ok {
		r0 = rf(ctx, installationId, subscriptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: ctx, installationId, topics
func (_m *Subscriptions) Unsubscribe(ctx context.Context, installationId string, topics []string) error {
	ret := _m.Called(ctx, installationId, topics)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, installationId, topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriptions creates a new instance of Subscriptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptions(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscriptions {
	mock := &Subscriptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
