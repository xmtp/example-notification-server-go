// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	interfaces "github.com/xmtp/example-notification-server-go/pkg/interfaces"
)

// Installations is an autogenerated mock type for the Installations type
type Installations struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, installationId
func (_m *Installations) Delete(ctx context.Context, installationId string) error {
	ret := _m.Called(ctx, installationId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, installationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInstallations provides a mock function with given fields: ctx, installationIds
func (_m *Installations) GetInstallations(ctx context.Context, installationIds []string) ([]interfaces.Installation, error) {
	ret := _m.Called(ctx, installationIds)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallations")
	}

	var r0 []interfaces.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]interfaces.Installation, error)); ok {
		return rf(ctx, installationIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []interfaces.Installation); ok {
		r0 = rf(ctx, installationIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, installationIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, installation
func (_m *Installations) Register(ctx context.Context, installation interfaces.Installation) (*interfaces.RegisterResponse, error) {
	ret := _m.Called(ctx, installation)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *interfaces.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Installation) (*interfaces.RegisterResponse, error)); ok {
		return rf(ctx, installation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Installation) *interfaces.RegisterResponse); ok {
		r0 = rf(ctx, installation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Installation) error); ok {
		r1 = rf(ctx, installation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInstallations creates a new instance of Installations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstallations(t interface {
	mock.TestingT
	Cleanup(func())
}) *Installations {
	mock := &Installations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
