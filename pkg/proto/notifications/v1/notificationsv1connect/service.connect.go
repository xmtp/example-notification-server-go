// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notifications/v1/service.proto

package notificationsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/xmtp/example-notification-server-go/pkg/proto/notifications/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationsName is the fully-qualified name of the Notifications service.
	NotificationsName = "notifications.v1.Notifications"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationsRegisterInstallationProcedure is the fully-qualified name of the Notifications's
	// RegisterInstallation RPC.
	NotificationsRegisterInstallationProcedure = "/notifications.v1.Notifications/RegisterInstallation"
	// NotificationsDeleteInstallationProcedure is the fully-qualified name of the Notifications's
	// DeleteInstallation RPC.
	NotificationsDeleteInstallationProcedure = "/notifications.v1.Notifications/DeleteInstallation"
	// NotificationsSubscribeProcedure is the fully-qualified name of the Notifications's Subscribe RPC.
	NotificationsSubscribeProcedure = "/notifications.v1.Notifications/Subscribe"
	// NotificationsSubscribeWithMetadataProcedure is the fully-qualified name of the Notifications's
	// SubscribeWithMetadata RPC.
	NotificationsSubscribeWithMetadataProcedure = "/notifications.v1.Notifications/SubscribeWithMetadata"
	// NotificationsUnsubscribeProcedure is the fully-qualified name of the Notifications's Unsubscribe
	// RPC.
	NotificationsUnsubscribeProcedure = "/notifications.v1.Notifications/Unsubscribe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	notificationsServiceDescriptor                     = v1.File_notifications_v1_service_proto.Services().ByName("Notifications")
	notificationsRegisterInstallationMethodDescriptor  = notificationsServiceDescriptor.Methods().ByName("RegisterInstallation")
	notificationsDeleteInstallationMethodDescriptor    = notificationsServiceDescriptor.Methods().ByName("DeleteInstallation")
	notificationsSubscribeMethodDescriptor             = notificationsServiceDescriptor.Methods().ByName("Subscribe")
	notificationsSubscribeWithMetadataMethodDescriptor = notificationsServiceDescriptor.Methods().ByName("SubscribeWithMetadata")
	notificationsUnsubscribeMethodDescriptor           = notificationsServiceDescriptor.Methods().ByName("Unsubscribe")
)

// NotificationsClient is a client for the notifications.v1.Notifications service.
type NotificationsClient interface {
	RegisterInstallation(context.Context, *connect.Request[v1.RegisterInstallationRequest]) (*connect.Response[v1.RegisterInstallationResponse], error)
	DeleteInstallation(context.Context, *connect.Request[v1.DeleteInstallationRequest]) (*connect.Response[emptypb.Empty], error)
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[emptypb.Empty], error)
	SubscribeWithMetadata(context.Context, *connect.Request[v1.SubscribeWithMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	Unsubscribe(context.Context, *connect.Request[v1.UnsubscribeRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewNotificationsClient constructs a client for the notifications.v1.Notifications service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationsClient{
		registerInstallation: connect.NewClient[v1.RegisterInstallationRequest, v1.RegisterInstallationResponse](
			httpClient,
			baseURL+NotificationsRegisterInstallationProcedure,
			connect.WithSchema(notificationsRegisterInstallationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteInstallation: connect.NewClient[v1.DeleteInstallationRequest, emptypb.Empty](
			httpClient,
			baseURL+NotificationsDeleteInstallationProcedure,
			connect.WithSchema(notificationsDeleteInstallationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v1.SubscribeRequest, emptypb.Empty](
			httpClient,
			baseURL+NotificationsSubscribeProcedure,
			connect.WithSchema(notificationsSubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribeWithMetadata: connect.NewClient[v1.SubscribeWithMetadataRequest, emptypb.Empty](
			httpClient,
			baseURL+NotificationsSubscribeWithMetadataProcedure,
			connect.WithSchema(notificationsSubscribeWithMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unsubscribe: connect.NewClient[v1.UnsubscribeRequest, emptypb.Empty](
			httpClient,
			baseURL+NotificationsUnsubscribeProcedure,
			connect.WithSchema(notificationsUnsubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationsClient implements NotificationsClient.
type notificationsClient struct {
	registerInstallation  *connect.Client[v1.RegisterInstallationRequest, v1.RegisterInstallationResponse]
	deleteInstallation    *connect.Client[v1.DeleteInstallationRequest, emptypb.Empty]
	subscribe             *connect.Client[v1.SubscribeRequest, emptypb.Empty]
	subscribeWithMetadata *connect.Client[v1.SubscribeWithMetadataRequest, emptypb.Empty]
	unsubscribe           *connect.Client[v1.UnsubscribeRequest, emptypb.Empty]
}

// RegisterInstallation calls notifications.v1.Notifications.RegisterInstallation.
func (c *notificationsClient) RegisterInstallation(ctx context.Context, req *connect.Request[v1.RegisterInstallationRequest]) (*connect.Response[v1.RegisterInstallationResponse], error) {
	return c.registerInstallation.CallUnary(ctx, req)
}

// DeleteInstallation calls notifications.v1.Notifications.DeleteInstallation.
func (c *notificationsClient) DeleteInstallation(ctx context.Context, req *connect.Request[v1.DeleteInstallationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteInstallation.CallUnary(ctx, req)
}

// Subscribe calls notifications.v1.Notifications.Subscribe.
func (c *notificationsClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.subscribe.CallUnary(ctx, req)
}

// SubscribeWithMetadata calls notifications.v1.Notifications.SubscribeWithMetadata.
func (c *notificationsClient) SubscribeWithMetadata(ctx context.Context, req *connect.Request[v1.SubscribeWithMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.subscribeWithMetadata.CallUnary(ctx, req)
}

// Unsubscribe calls notifications.v1.Notifications.Unsubscribe.
func (c *notificationsClient) Unsubscribe(ctx context.Context, req *connect.Request[v1.UnsubscribeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.unsubscribe.CallUnary(ctx, req)
}

// NotificationsHandler is an implementation of the notifications.v1.Notifications service.
type NotificationsHandler interface {
	RegisterInstallation(context.Context, *connect.Request[v1.RegisterInstallationRequest]) (*connect.Response[v1.RegisterInstallationResponse], error)
	DeleteInstallation(context.Context, *connect.Request[v1.DeleteInstallationRequest]) (*connect.Response[emptypb.Empty], error)
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[emptypb.Empty], error)
	SubscribeWithMetadata(context.Context, *connect.Request[v1.SubscribeWithMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	Unsubscribe(context.Context, *connect.Request[v1.UnsubscribeRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewNotificationsHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationsHandler(svc NotificationsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationsRegisterInstallationHandler := connect.NewUnaryHandler(
		NotificationsRegisterInstallationProcedure,
		svc.RegisterInstallation,
		connect.WithSchema(notificationsRegisterInstallationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationsDeleteInstallationHandler := connect.NewUnaryHandler(
		NotificationsDeleteInstallationProcedure,
		svc.DeleteInstallation,
		connect.WithSchema(notificationsDeleteInstallationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationsSubscribeHandler := connect.NewUnaryHandler(
		NotificationsSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(notificationsSubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationsSubscribeWithMetadataHandler := connect.NewUnaryHandler(
		NotificationsSubscribeWithMetadataProcedure,
		svc.SubscribeWithMetadata,
		connect.WithSchema(notificationsSubscribeWithMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationsUnsubscribeHandler := connect.NewUnaryHandler(
		NotificationsUnsubscribeProcedure,
		svc.Unsubscribe,
		connect.WithSchema(notificationsUnsubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/notifications.v1.Notifications/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationsRegisterInstallationProcedure:
			notificationsRegisterInstallationHandler.ServeHTTP(w, r)
		case NotificationsDeleteInstallationProcedure:
			notificationsDeleteInstallationHandler.ServeHTTP(w, r)
		case NotificationsSubscribeProcedure:
			notificationsSubscribeHandler.ServeHTTP(w, r)
		case NotificationsSubscribeWithMetadataProcedure:
			notificationsSubscribeWithMetadataHandler.ServeHTTP(w, r)
		case NotificationsUnsubscribeProcedure:
			notificationsUnsubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationsHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationsHandler struct{}

func (UnimplementedNotificationsHandler) RegisterInstallation(context.Context, *connect.Request[v1.RegisterInstallationRequest]) (*connect.Response[v1.RegisterInstallationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notifications.v1.Notifications.RegisterInstallation is not implemented"))
}

func (UnimplementedNotificationsHandler) DeleteInstallation(context.Context, *connect.Request[v1.DeleteInstallationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notifications.v1.Notifications.DeleteInstallation is not implemented"))
}

func (UnimplementedNotificationsHandler) Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notifications.v1.Notifications.Subscribe is not implemented"))
}

func (UnimplementedNotificationsHandler) SubscribeWithMetadata(context.Context, *connect.Request[v1.SubscribeWithMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notifications.v1.Notifications.SubscribeWithMetadata is not implemented"))
}

func (UnimplementedNotificationsHandler) Unsubscribe(context.Context, *connect.Request[v1.UnsubscribeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notifications.v1.Notifications.Unsubscribe is not implemented"))
}
